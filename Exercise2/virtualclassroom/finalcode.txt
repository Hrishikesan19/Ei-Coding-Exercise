package virtualclassroom;

import java.util.*;

import virtualclassroom.Commands.*;
import virtualclassroom.Exceptions.*;
import virtualclassroom.Handlers.*;

public class VirtualClassroomManager {
    private static VirtualClassroomManager instance = new VirtualClassroomManager();
    private Map<String, Classroom> classrooms = new HashMap<>();
    private VirtualClassroomManager() {}
    public static VirtualClassroomManager getInstance() { return instance; }

    public boolean addClassroom(String name) {
        if (classrooms.containsKey(name)) return false;
        classrooms.put(name, new Classroom(name));
        return true;
    }

    public boolean removeClassroom(String name) {
        if (classrooms.containsKey(name)) {
            classrooms.remove(name);
            return true;
        }
        return false;
    }
    

    public Classroom getClassroom(String name) { return classrooms.get(name); }

    public Collection<Classroom> getAllClassrooms() { return classrooms.values(); }
}

package virtualclassroom;

import java.util.*;

import virtualclassroom.Commands.*;
import virtualclassroom.Exceptions.*;
import virtualclassroom.Handlers.*;

public class Student {
    private String id;
    private Set<String> submittedAssignments = new HashSet<>();

    public Student(String id) { this.id = id; }
    public String getId() { return id; }

    public boolean submit(String assignmentTitle) { return submittedAssignments.add(assignmentTitle); }
    public boolean hasSubmitted(String assignmentTitle) { return submittedAssignments.contains(assignmentTitle); }
}
package virtualclassroom;

import java.util.*;
import java.time.LocalDateTime;

import virtualclassroom.Commands.*;
import virtualclassroom.Exceptions.*;
import virtualclassroom.Handlers.*;


public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        LoggerUtil.log("=== Welcome to Virtual Classroom Manager ===");
        printHelp();

        while (true) {
            System.out.print("> ");
            String line = sc.nextLine().trim();
            line = line.trim().replaceAll("\\s+", " ");
            if (line.equalsIgnoreCase("exit")) break;
            if (line.equalsIgnoreCase("help")) { printHelp(); continue; }

            try {
                if (line.isEmpty()) continue;

                String[] parts = line.split(" ", 2);
                String cmd = parts[0].toLowerCase();

                switch (cmd) {
                    case "add_classroom":
                        handleAddClassroom(parts);
                        break;
                    case "remove_classroom":
                        handleRemoveClassroom(parts);
                        break;
                    case "list_classrooms":
                        listClassrooms();
                        break;
                    case "add_student":
                        handleAddStudent(parts);
                        break;
                    case "remove_student":
                        handleRemoveStudent(parts);
                        break;
                    case "list_students":
                        handleListStudents(parts);
                        break;
                    case "schedule_assignment":
                        handleScheduleAssignment(parts);
                        break;
                    case "remove_assignment":
                        handleRemoveAssignment(parts);
                        break;
                    case "list_assignments":
                        handleListAssignments(parts);
                        break;
                    case "submit_assignment":
                        handleSubmitAssignment(parts);
                        break;
                    case "pending_students":
                        handlePendingStudents(parts);
                        break;
                    default:
                        LoggerUtil.log("Unknown command. Type 'help' for available commands.");
                        break;
                }

            } catch (Exception e) {
                LoggerUtil.log("Error: " + e.getMessage());
            }
        }
    }

    // ======= Handlers =======
    private static void handleAddClassroom(String[] parts) {
        if (parts.length < 2) {
            LoggerUtil.log("Usage: add_classroom <ClassName>");
            return;
        }
        String className = parts[1];
        TransientErrorHandler.retry(() -> new AddClassroomCommand(className).execute());
    }

    private static void handleRemoveClassroom(String[] parts) {
        if (parts.length < 2) {
            LoggerUtil.log("Usage: remove_classroom <ClassName>");
            return;
        }
        String className = parts[1];
        TransientErrorHandler.retry(() -> new RemoveClassroomCommand(className).execute());
    }

    private static void handleAddStudent(String[] parts) {
        if (parts.length < 2) {
            LoggerUtil.log("Usage: add_student <StudentID> <ClassName>");
            return;
        }
        String[] args = parts[1].split(" ", 2);
        if (args.length < 2) {
            LoggerUtil.log("Please provide both StudentID and ClassName.");
            return;
        }
        TransientErrorHandler.retry(() -> new AddStudentCommand(args[0], args[1]).execute());
    }

    private static void handleRemoveStudent(String[] parts) {
        if (parts.length < 2) {
            LoggerUtil.log("Usage: remove_student <StudentID> <ClassName>");
            return;
        }
        String[] args = parts[1].split(" ", 2);
        if (args.length < 2) {
            LoggerUtil.log("Please provide both StudentID and ClassName.");
            return;
        }
        TransientErrorHandler.retry(() -> new RemoveStudentCommand(args[0], args[1]).execute());
    }

    private static void handleListStudents(String[] parts) {
        if (parts.length < 2) {
            LoggerUtil.log("Usage: list_students <ClassName>");
            return;
        }
        listStudents(parts[1]);
    }

    private static void handleScheduleAssignment(String[] parts) {
        if (parts.length < 2) {
            LoggerUtil.log("Usage: schedule_assignment <ClassName> <AssignmentTitle>");
            return;
        }
        String[] args = parts[1].split(" ", 2);
        if (args.length < 2) {
            LoggerUtil.log("Please provide both ClassName and AssignmentTitle.");
            return;
        }
        TransientErrorHandler.retry(() -> new ScheduleAssignmentCommand(args[0], args[1]).execute());
    }

    private static void handleRemoveAssignment(String[] parts) {
        if (parts.length < 2) {
            LoggerUtil.log("Usage: remove_assignment <ClassName> <AssignmentTitle>");
            return;
        }
        String[] args = parts[1].split(" ", 2);
        if (args.length < 2) {
            LoggerUtil.log("Please provide both ClassName and AssignmentTitle.");
            return;
        }
        TransientErrorHandler.retry(() -> new RemoveAssignmentCommand(args[0], args[1]).execute());
    }

    private static void handleListAssignments(String[] parts) {
        if (parts.length < 2) {
            LoggerUtil.log("Usage: list_assignments <ClassName>");
            return;
        }
        listAssignments(parts[1]);
    }

    private static void handleSubmitAssignment(String[] parts) {
        if (parts.length < 2) {
            LoggerUtil.log("Usage: submit_assignment <StudentID> <ClassName> <AssignmentTitle>");
            return;
        }
        String[] args = parts[1].split(" ", 3);
        if (args.length < 3) {
            LoggerUtil.log("Please provide StudentID, ClassName, and AssignmentTitle.");
            return;
        }
        String studentId = args[0];
        String className = args[1];
        String assignmentTitle = args[2];
        TransientErrorHandler.retry(() -> new SubmitAssignmentCommand(studentId, className, assignmentTitle).execute());
    }

    private static void handlePendingStudents(String[] parts) {
        if (parts.length < 2) {
            LoggerUtil.log("Usage: pending_students <ClassName> <AssignmentTitle>");
            return;
        }
        String[] args = parts[1].split(" ", 2);
        if (args.length < 2) {
            LoggerUtil.log("Please provide both ClassName and AssignmentTitle.");
            return;
        }
        pendingStudents(args[0], args[1]);
    }

    // ======= List Methods =======
    private static void listClassrooms() {
        Collection<Classroom> classes = VirtualClassroomManager.getInstance().getAllClassrooms();
        if (classes.isEmpty()) LoggerUtil.log("No classrooms found.");
        else for (Classroom c : classes) LoggerUtil.log(c.getName());
    }

    private static void listStudents(String className) {
        Classroom c = VirtualClassroomManager.getInstance().getClassroom(className);
        if (c == null) {
            LoggerUtil.log("Error: Classroom '" + className + "' not found.");
            return;
        }
        Collection<Student> students = c.getStudents();
        if (students.isEmpty()) LoggerUtil.log("No students in " + className);
        else for (Student s : students) LoggerUtil.log(s.getId());
    }

    private static void listAssignments(String className) {
        Classroom c = VirtualClassroomManager.getInstance().getClassroom(className);
        if (c == null) {
            LoggerUtil.log("Error: Classroom '" + className + "' not found.");
            return;
        }
        Collection<Assignment> assignments = c.getAssignments();
        if (assignments.isEmpty()) LoggerUtil.log("No assignments in " + className);
        else for (Assignment a : assignments) LoggerUtil.log(a.getTitle() + (a.isCompleted() ? " [Completed]" : ""));
    }

    private static void pendingStudents(String className, String title) {
        Classroom c = VirtualClassroomManager.getInstance().getClassroom(className);
        if (c == null) {
            LoggerUtil.log("Error: Classroom '" + className + "' not found.");
            return;
        }
        try {
            List<Student> pending = c.pendingStudents(title);
            if (pending.isEmpty()) LoggerUtil.log("No pending students for '" + title + "' in " + className);
            else for (Student s : pending) LoggerUtil.log(s.getId());
        } catch (AssignmentNotFoundException e) {
            LoggerUtil.log(e.getMessage());
        }
        
    }

    // ======= Help =======
    private static void printHelp() {
        System.out.println("Commands:");
        System.out.println("add_classroom <ClassName>");
        System.out.println("remove_classroom <ClassName>");
        System.out.println("list_classrooms");
        System.out.println("add_student <StudentID> <ClassName>");
        System.out.println("remove_student <StudentID> <ClassName>");
        System.out.println("list_students <ClassName>");
        System.out.println("schedule_assignment <ClassName> <AssignmentTitle>");
        System.out.println("remove_assignment <ClassName> <AssignmentTitle>");
        System.out.println("list_assignments <ClassName>");
        System.out.println("submit_assignment <StudentID> <ClassName> <AssignmentTitle>");
        System.out.println("pending_students <ClassName> <AssignmentTitle>");
        System.out.println("help - show this help");
        System.out.println("exit - quit program");
    }
}

package virtualclassroom;

import java.util.*;

import virtualclassroom.Commands.*;
import virtualclassroom.Exceptions.*;
import virtualclassroom.Handlers.*;

public class Classroom {
    private String name;
    private Map<String, Student> students = new HashMap<>();
    private Map<String, Assignment> assignments = new HashMap<>();

    public Classroom(String name) { this.name = name; }
    public String getName() { return name; }

    public boolean enrollStudent(String studentId) {
        if (students.containsKey(studentId)) return false;
        students.put(studentId, new Student(studentId));
        return true;
    }

    public boolean removeStudent(String studentId) {
        if (students.containsKey(studentId)) {
            students.remove(studentId);
            return true;
        }
        return false;
    }
    

    public Collection<Student> getStudents() { return students.values(); }
    public Student getStudent(String id) { return students.get(id); }

    public boolean addAssignment(String title) {
        if (assignments.containsKey(title)) return false;
        assignments.put(title, new Assignment(title));
        return true;
    }

    public boolean removeAssignment(String title) {
        if (assignments.containsKey(title)) {
            assignments.remove(title);
            return true;
        }
        return false;
    }
    public Collection<Assignment> getAssignments() { return assignments.values(); }
    public Assignment getAssignment(String title) { return assignments.get(title); }

    public List<Student> pendingStudents(String title) {
        Assignment a = assignments.get(title);
        if (a == null) throw new AssignmentNotFoundException(title);
    
        List<Student> pending = new ArrayList<>();
        for (Student s : students.values()) {
            if (!a.hasStudentSubmitted(s)) pending.add(s);
        }
        return pending;
    }
    
    

    public void checkAndMarkCompleted(String title) {
        Assignment a = assignments.get(title);
        if (a == null) return;
    
        boolean allSubmitted = true;
        for (Student s : students.values()) {
            if (!a.hasStudentSubmitted(s)) {
                allSubmitted = false;
                break;
            }
        }
    
        if (allSubmitted) a.markCompleted();
    }
    
}
package virtualclassroom;

import java.util.*;

import virtualclassroom.Commands.*;
import virtualclassroom.Exceptions.*;
import virtualclassroom.Handlers.*;


public class Assignment {
    private String title;
    private boolean completed;
    private Set<String> submittedStudentIds = new HashSet<>();

    public Assignment(String title) {
        this.title = title;
        this.completed = false;
    }

    public String getTitle() {
        return title;
    }

    public boolean isCompleted() {
        return completed;
    }

    public void submit(Student s, Classroom classroom) {
        if (completed) return;

        submittedStudentIds.add(s.getId());

        // Check if all students in the class have submitted
        boolean allSubmitted = classroom.getStudents().stream()
                .allMatch(student -> submittedStudentIds.contains(student.getId()));

        if (allSubmitted) {
            markCompleted();
        }
    }

    public boolean hasStudentSubmitted(Student s) {
        return submittedStudentIds.contains(s.getId());
    }

    public void markCompleted() {
        completed = true;
    }
}
package virtualclassroom.Handlers;
import java.util.*;
import java.time.LocalDateTime;
import java.util.function.Supplier;

// Logger utility
public class LoggerUtil {
    public static void log(String msg) {
        System.out.println(LocalDateTime.now() + " | " + msg+"\n");
    }
}

package virtualclassroom.Handlers;

public class TransientErrorHandler {
    public static void retry(Runnable action) {
        int attempts = 3;
        while (attempts-- > 0) {
            try {
                action.run();
                return;
            } catch (Exception e) {
                LoggerUtil.log("Transient error occurred: " + e.getMessage() + ". Retrying...");
                try {
                    Thread.sleep(200);
                } catch (InterruptedException ignored) {
                }
            }
        }
        LoggerUtil.log("Action failed after retries.");
    }
}
package virtualclassroom.Exceptions;


public class AssignmentNotFoundException extends RuntimeException {
    public AssignmentNotFoundException(String title) { super("Assignment '" + title + "' not found."); }
}

package virtualclassroom.Exceptions;
public class ClassroomNotFoundException extends RuntimeException {
    public ClassroomNotFoundException(String name) { super("Classroom '" + name + "' not found."); }
}
package virtualclassroom.Exceptions;
public class StudentNotFoundException extends RuntimeException {
    public StudentNotFoundException(String id) { super("Student '" + id + "' not found."); }
}
package virtualclassroom.Commands;
import virtualclassroom.VirtualClassroomManager;
import virtualclassroom.Classroom;
import virtualclassroom.Student;
import virtualclassroom.Assignment;
import virtualclassroom.Exceptions.*;
import virtualclassroom.Handlers.LoggerUtil;

public class AddClassroomCommand implements Command {
    private String className;
    public AddClassroomCommand(String className) { this.className = className; }

    @Override
    public void execute() {
        boolean added = VirtualClassroomManager.getInstance().addClassroom(className);
        if (added) LoggerUtil.log("Classroom " + className + " has been created.");
        else LoggerUtil.log("Classroom " + className + " already exists.");
    }
}

package virtualclassroom.Commands;
import virtualclassroom.VirtualClassroomManager;
import virtualclassroom.Classroom;
import virtualclassroom.Student;
import virtualclassroom.Assignment;
import virtualclassroom.Exceptions.*;
import virtualclassroom.Handlers.LoggerUtil;

public class AddStudentCommand implements Command {
    private String studentId, className;
    public AddStudentCommand(String studentId, String className) {
        this.studentId = studentId; this.className = className;
    }

    @Override
    public void execute() {
        Classroom c = VirtualClassroomManager.getInstance().getClassroom(className);
        if (c == null) {
            LoggerUtil.log("Classroom '" + className + "' not found.");
            return;
        }
        boolean enrolled = c.enrollStudent(studentId);
        if (enrolled) LoggerUtil.log("Student " + studentId + " has been enrolled in " + className);
        else LoggerUtil.log("Student " + studentId + " already enrolled in " + className);
    }
}
package virtualclassroom.Commands;

public interface Command { void execute(); }

package virtualclassroom.Commands;
import virtualclassroom.VirtualClassroomManager;
import virtualclassroom.Classroom;
import virtualclassroom.Student;
import virtualclassroom.Assignment;
import virtualclassroom.Exceptions.*;
import virtualclassroom.Handlers.LoggerUtil;

public class RemoveAssignmentCommand implements Command {
    private String className, title;
    public RemoveAssignmentCommand(String className, String title) { this.className = className; this.title = title; }
    @Override
public void execute() {
    Classroom c = VirtualClassroomManager.getInstance().getClassroom(className);
    if (c == null) {
        LoggerUtil.log("Error: Classroom '" + className + "' not found.");
        return;
    }

    boolean removed = c.removeAssignment(title);
    if (removed)
        LoggerUtil.log("Assignment '" + title + "' removed from " + className + ".");
    else
        LoggerUtil.log("Error: Assignment '" + title + "' not found in " + className + ".");
}

}


package virtualclassroom.Commands;
import virtualclassroom.VirtualClassroomManager;
import virtualclassroom.Classroom;
import virtualclassroom.Student;
import virtualclassroom.Assignment;
import virtualclassroom.Exceptions.*;
import virtualclassroom.Handlers.LoggerUtil;
public class RemoveClassroomCommand implements Command {
    private String name;
    public RemoveClassroomCommand(String name) { this.name = name; }
    @Override
public void execute() {
    boolean removed = VirtualClassroomManager.getInstance().removeClassroom(name);
    if (removed)
        LoggerUtil.log("Classroom " + name + " has been removed.");
    else
        LoggerUtil.log("Error: Classroom '" + name + "' not found.");
}

}

package virtualclassroom.Commands;
import virtualclassroom.VirtualClassroomManager;
import virtualclassroom.Classroom;
import virtualclassroom.Student;
import virtualclassroom.Assignment;
import virtualclassroom.Exceptions.*;
import virtualclassroom.Handlers.LoggerUtil;
import java.util.*;
public class RemoveStudentCommand implements Command {
    private String studentId, className;
    public RemoveStudentCommand(String studentId, String className) { this.studentId = studentId; this.className = className; }
    

    @Override
public void execute() {
    Classroom c = VirtualClassroomManager.getInstance().getClassroom(className);
    if (c == null) {
        LoggerUtil.log("Error: Classroom '" + className + "' not found.");
        return;
    }

    boolean removed = c.removeStudent(studentId);
    if (removed)
        LoggerUtil.log("Student " + studentId + " removed from " + className + ".");
    else
        LoggerUtil.log("Error: Student " + studentId + " not found in " + className + ".");
}


}
package virtualclassroom.Commands;
import java.util.*;
import virtualclassroom.VirtualClassroomManager;
import virtualclassroom.Classroom;
import virtualclassroom.Student;
import virtualclassroom.Assignment;
import virtualclassroom.Exceptions.*;
import virtualclassroom.Handlers.LoggerUtil;
public class ScheduleAssignmentCommand implements Command {
    private String className, assignmentTitle;
    public ScheduleAssignmentCommand(String className, String assignmentTitle) {
        this.className = className;
        this.assignmentTitle = assignmentTitle;
    }

    @Override
    public void execute() {
        Classroom c = VirtualClassroomManager.getInstance().getClassroom(className);
        if (c == null) {
            LoggerUtil.log("Classroom '" + className + "' not found.");
            return;
        }
        boolean added = c.addAssignment(assignmentTitle);
        if (added) LoggerUtil.log("Assignment '" + assignmentTitle + "' scheduled for " + className);
        else LoggerUtil.log("Assignment '" + assignmentTitle + "' already exists in " + className);
    }
}
package virtualclassroom.Commands;
import virtualclassroom.VirtualClassroomManager;
import virtualclassroom.Classroom;
import virtualclassroom.Student;
import virtualclassroom.Assignment;
import virtualclassroom.Exceptions.*;
import virtualclassroom.Handlers.LoggerUtil;
import virtualclassroom.Handlers.TransientErrorHandler;
public class SubmitAssignmentCommand implements Command {

    private String studentId;
    private String className;
    private String assignmentTitle;

    public SubmitAssignmentCommand(String studentId, String className, String assignmentTitle) {
        this.studentId = studentId;
        this.className = className;
        this.assignmentTitle = assignmentTitle;
    }

    @Override
    public void execute() {
        try {
            TransientErrorHandler.retry(() -> {
                Classroom c = VirtualClassroomManager.getInstance().getClassroom(className);
                if (c == null) throw new ClassroomNotFoundException(className);
    
                Student s = c.getStudent(studentId);
                if (s == null) throw new StudentNotFoundException(studentId); // permanent error
    
                Assignment a = c.getAssignment(assignmentTitle);
                if (a == null) throw new AssignmentNotFoundException(assignmentTitle);
    
                a.submit(s, c);
                LoggerUtil.log("Assignment '" + assignmentTitle + "' submitted by " + studentId);
            });
        } catch (StudentNotFoundException | ClassroomNotFoundException | AssignmentNotFoundException e) {
            LoggerUtil.log("Error: " + e.getMessage()); // log permanent error
        }
    }
    
}
